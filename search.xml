<?xml version="1.0" encoding="utf-8"?>
<search>
  
    
    <entry>
      <title><![CDATA[JavaScript Hoisting]]></title>
      <url>%2F2017%2F03%2F25%2FJavaScript-Hoisting%2F</url>
      <content type="text"><![CDATA[前言：JS中在声明函数与变量的时候是存在变量提升的问题，一不注意，有的时候会导致一些bug，本文主要就是针对JS中的提升问题。JS中的提升，分为变量提升与函数提升，并且函数提升是优先于变量提升的。当然此文讨论的内容不包括ES6。 提升的概念其实针对这个概念，私以为可以简单的理解为JS解析器将函数的声明与变量的声明提升到所在作用域的顶部，以方便使用。注意，只是将声明提前，赋值并没有提前。 实例说明 12345678console.log(a); // undefinedconsole.log(b); // function b() &#123;alert(98);&#125;b(); // 98function b() &#123; console.log(98);&#125;var a = 97; 上面的例子其实就相当于是： 123456789function b() &#123; alert(98);&#125;var a;b(); // 98console.log(a); // undefinedconsole.log(b); // function b() &#123;alert(98);&#125;a = 97; 块中的提升在JS的块中声明函数的时候，出现的了比较有趣的现象： 123456789101112131415161718192021222324console.log(a); // undefinedconsole.log(b); // undefinedconsole.log(c); // undefinedconsole.log(d); // undefined// b() //不注释掉会报错if (true) &#123; var a = 97; b(); // 98 function b() &#123; console.log(98); &#125;&#125; else &#123; var c = 99; function d() &#123; console.log(100); &#125;&#125;console.log(a, b, c, d);// a = 97// b = function b() &#123;console.log(98)&#125;// c = undefined// d = undefined 现在这个情况就有点意思了： 因为JS是不存在块级作用域的，所以变量 a 和 c 打印出来 undefined 是很好理解的，但是 b 和 d 是什么情况呢？为什么也是 undefined 呢？这到底是提升了还是没提升呢？ 经过查阅资料，我认为这块是浏览器的一种容错机制的结果（未针对所有浏览器的不同版本进行测试，如果有错误，希望留言斧正，谢谢）。因为严格来说，在块中声明函数属于无效语法，JS引擎会尝试修正错误，将其转化为合理的状态（这点在《JavaScript高级程序设计 第三版》176页也是一笔带过）。 我认为，浏览器尝试修正的时候是将函数申明转化为函数表达式，并放在块的最顶部。所以函数的变量名进行了提升，而函数体其实只是一种折中的提升 12345678910111213141516171819// 上边代码相当于是这样var a;var b;var c;var d;if (true) &#123; b = function b() &#123; console.log(98); &#125;; a = 97; b(); // 98&#125; else &#123; d = function () &#123; console.log(100); &#125; c = 99;&#125;// 受限于水平，如有错误，欢迎留言斧正，谢谢 针对这种情况，强烈不建议在块中出现函数声明，建议改为函数表达式。 总结只要记住这个关键的点，其他的类似这样题目都会迎刃而解，当然搞懂这个不是为了做题，而是为了避免一些工作中的bug，所以推荐以后在写代码的时候，最好按照如下的格式去书写 12345function fun() &#123; // 声明各种变量 // 声明函数 // 其他语句&#125; 参考链接：JavaScript Scoping and HoistingFirefox doesn’t hoist function declarations in blocks 原创文章，版权所有，转载请注明出处。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[mac os下的Apache配置 macOS Sierra 10.12]]></title>
      <url>%2F2017%2F03%2F08%2Fmac-os%E4%B8%8B%E7%9A%84Apache%E9%85%8D%E7%BD%AE-macOS-Sierra-10-12%2F</url>
      <content type="text"><![CDATA[写在前面mac系统自带Apache这点还是很方便的，当然如果想更方便快捷，推荐MAMP &amp; MAMP PRO，还是很好用的，当然价格也是很给力的。 具体操作步骤 1.打开终端，查看Apache版本 httpd -v 2.开启Apache sudo apachectl start 3.验证是否开启：点击 http://127.0.0.1 或 http://localhost，浏览器页面出现 “ It works！“就表示Apache 就启动成功了。站点的根目录被设置为 /Library/WebServer/Documents 4.配置用户访问目录，终端执行以下操作，以便在当前用户的根目录下创建Sites（站点） mkdir ~/Sites 5.搞清楚自己的username，username就是你自己的用户名，每个人不一样，需要修改，可以通过终端查询。 whoami // 查询自己的username 6.创建username.conf文件终端操作如下 cd /etc/apache2/users sudo touch username.conf // username修改为上一步终端的查询值 7.修改内容 修改内容可以在终端中操作，也可以在文本编辑器（如sublime中）中操作，都可以。在终端中操作，终端代码如下 sudo nano username.conf // username需要修改 输入以下内容 // username需要修改 Options Indexes MultiViews AllowOverride All Order allow,deny Allow from all 保存退出的时候，可能需要密码，正常输入保存即可 8.在终端中键入内容以修改当前文件的访问权限 sudo chmod 775 username.conf 9.修改Apache的httpd.conf文件 cd /etc/apache2/ sudo nano httpd.conf 找到以下信息，将其前面的” # “去掉 &gt; LoadModule php5_module libexec/apache2/libphp5.soLoadModule authz_core_module libexec/apache2/mod_authz_core.soLoadModule authz_host_module libexec/apache2/mod_authz_host.soLoadModule userdir_module libexec/apache2/mod_userdir.soInclude /private/etc/apache2/extra/httpd-userdir.conf 可以在终端中” ctrl+w “查找 同样也可以在参照上面的方法在编辑器中查找 10.修改httpd-userdir.conf文件，方法类似上边的步骤 cd /etc/apache2/extra/ sudo nano httpd-userdir.conf 找到以下信息，将其前面的” # “去掉 Include /private/etc/apache2/users/*.conf 11.再次修改 httpd.conf，参照以上的步骤 sudo nano /etc/apache2/httpd.conf 找到以下内容，并将” denied “修改为” granted “ ​ AllowOverride none​ Require all denied // 将” denied “修改为” granted “ 即修改为 ​ AllowOverride none​ Require all granted 12.重启Apache，检阅胜利的果实 sudo apachectl restart // 重启Apache 点击Finder，” command + shift + g “，输入“ /users/username/Sites ”（username需需改），以打开你的个人访问站点。为了更直观的看到结果，建议此时，可以将一个demo.html文件存放在其中。然后在浏览器的地址栏键入“ http: //localhost/~username ” username需要修改，就可以看到最终的效果了 ​]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[关于 nth-child(n)与nth-of-type(n) 的区别]]></title>
      <url>%2F2017%2F02%2F27%2F%E5%8C%BA%E5%88%AB%2F</url>
      <content type="text"><![CDATA[此篇的由来nth-child(n)与nth-of-type(n)好像在平时使用中并没有太大的区别，至少我之前是这么想的，直到有一次…… 用法与区别其实这两个选择器的日常的使用也不是很频繁，但是有的时候的确很好用。不如正题：仔细看下定义就知道两者的区别了 nth-child(n) :nth-child(n) 选择器匹配属于其父元素的第 N 个子元素，不论元素的类型 nth-of-type(n) :nth-of-type(n) 选择器匹配属于父元素的特定类型的第 N 个子元素的每个元素 其实看到这个地方大致就差多了理解了，一个是分类筛选子集，另一个则不是下面通过具体得例子说明两者的区别 123456789101112&lt;!-- html结构 --&gt;&lt;div class="demo"&gt; &lt;div&gt;这是第一个div&lt;/div&gt; &lt;div&gt;这是第二个div&lt;/div&gt; &lt;div&gt;这是第三个div&lt;/div&gt; &lt;h5&gt;这是第一个h5&lt;/h5&gt; &lt;h5&gt;这是第二个h5&lt;/h5&gt; &lt;h5&gt;这是第三个h5&lt;/h5&gt; &lt;p&gt;这是第一个p&lt;/p&gt; &lt;p&gt;这是第二个p&lt;/p&gt; &lt;p&gt;这是第三个p&lt;/p&gt;&lt;/div&gt; 1.均不采用限制元素123456789/* 均不采用限定元素 *//* 设置红色背景 */.demo :nth-child(3) &#123; background: #f00;&#125;/* 设置绿色背景 */.demo :nth-of-type(2) &#123; background: #0ff;&#125; 具体页面效果如下图 注意两者的前面都没有加限制元素，所以两个表达的意思分别是：.demo :nth-child(3)：选择demo类的第3个子元素.demo :nth-of-type(2)：选择demo类中每个元素类型的第二个元素，所以第二个div，第二个h5，第二个p都会被选中 2.采用限制元素123456789/* 均不采用限定元素 *//* 设置红色背景 */.demo p:nth-child(3) &#123; background: #f00;&#125;/* 设置绿色背景 */.demo p:nth-of-type(2) &#123; background: #0ff;&#125; 具体页面效果如下图 现在的情况就有意思了，来看下具体的原因：.demo p:nth-child(3)：选择demo类的p元素且其是第3个子元素，很显然不存在这样的元素，所以选择失败，自然也就没有元素节点的背景色被设置成红色.demo p:nth-of-type(2)：选择demo类中的第2个p元素 总结ele:nth-child(n)选择器简单的理解就是：是指定的ele类型同时还是第n个子元素，满足这两个条件就可以选择到，否则就无法选择 ele:nth-of-type(n)选择器简单的理解就是：选择父元素的第n个指定元素ele类型的子元素 原创文章，转载请标明出处。]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[test2]]></title>
      <url>%2F2017%2F02%2F26%2Ftest2%2F</url>
      <content type="text"><![CDATA[这个一遍用来测试的文章 1var a = 1;]]></content>
    </entry>

    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>%2F2017%2F02%2F25%2Fhello-world%2F</url>
      <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
    </entry>

    
  
  
</search>
